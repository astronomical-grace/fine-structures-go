syntax = "proto3";
package graph;

//option go_package = "github.com/astronomical-grace/fine-structures-go/lib2x3/graph";


message CatalogState {

    int32               MajorVers                   = 1;
    int32               MinorVers                   = 2;
    
    // TraceCount is the Traces len for this Catalog's Traces index.
    // This effectively sets a vertex size limit for Graphs this Catalog can process.
    // DefaultCatalogTraceCount specifies the default TraceCount for new catalogs. 
    int32               TraceCount                  = 10;
                
    // NumTraces[Nv] is the number of traces of in this catalog for a given number of vertices.
    // Note: NumTraces[0] is always 0 and len(NumTraces) == TraceCount+1
    repeated uint64     NumTraces                   = 11;
    
    // NumPrimes[Nv] is the number of particle primes for a given number of vertices.
    // Note: NumPrimes[0] is always 0 and len(NumPrimes) == TraceCount+1
    repeated uint64     NumPrimes                   = 12;
    
    // Set if this catalog is to auto-determine if a newly added Graph / Traces are primes.
    bool                IsPrimeCatalog              = 20;
}



enum Bool {
    Bool_Unknown = 0;
    Bool_No      = 1;
    Bool_Yes     = 3;
}


// GraphDef is a particular vertex+edge assignment with bound names.
// Has similarities to a "Contributing structure" in quantum|chemistry lingo. https://en.wikipedia.org/wiki/Resonance_(chemistry)
message GraphDef {

    Bool                IsPrime                     = 1;
                
    // If non-zero, the Traces of this graph has a registered ID. 
    // These values can be used to lookup a graph's common ascii symbolic name, UTF8 symbolic name, or nickname
    uint64              TracesID                    = 2;
    uint64              GraphID                     = 3;
                
    // A specific vertex+edge assignment 
    bytes               GraphEncoding               = 8;
                
                    // Graph expr string that canonically express this graph and can therefore be used for easy graph equivalence testing.
    string              CanonicGraphExpr            = 9;
   
    // Any number of graph expr strings that reduce to the same equivalent (canonic) graph.
    // This list is stored and maintained in sorted UTF8 order for binary search.
    repeated string     GraphExprs                  = 12;
    
}



// GroupID is a vertex group ID containing one or more Vtx.
enum GroupID {
    GroupID_void      = 0;
    GroupID_LoopVtx   = 1; // Group self-edge having cycle length 1 
    GroupID_LoopGroup = 2; // Group self-edge having cycle length 2
    GroupID_G1        = 3; // Ordinal of first vertex group
}

// GraphStatus describes the state of a 2x3 graph.
enum GraphStatus {
    
    // The graph is an in unassigned or otherwise invalid state
    GraphStatus_Invalid = 0;
     
    // All Vtx have been validated as expressing a valid and complete graph.
    // VtxID, E_FromVtx. E_Sign have been assigned.
    // Each Vtx is in its own separate group and has exactly 3 VtxEdges.
    GraphStatus_Validated = 2;
    
    // Next, edges that have matching DstVtxID and SrcVtxID are combined (summed).
    GraphStatus_Computed = 4;
    
    // A cycle spectrum is performed on the graph to canonically order vtx groups.
    // Vtx determined to be in the same group are merged into a single vtx group.
    // Finally, all edges are normalized. 
    GraphStatus_Canonized = 6;
}


enum OddSign {
    OddSign_Natural = 0; // Odd cycles are not inverted 
    OddSign_Zero    = 1; // Odd cycles are zero
    OddSign_Invert  = 2; // Odd cycles are inverted
}


enum TracesSign {
    TracesSign_Unknown  = 0;
    TracesSign_Zero     = 1;
    TracesSign_Positive = 2;
    TracesSign_Negative = 3;
}

enum TracesCycle {
    TracesCycle_Nil    = 0; 
    TracesCycle_Odd    = 1;
    TracesCycle_Even   = 2; 
}

// VtxEdge
message VtxEdge {
    
    // Initially assigned label: 1, 2, 3,..  (a one-based index ID)
    uint32              DstVtxID = 2;
    
    // Specifies the remote vertex of this edge (a one-based vtx index ID)
    uint32              SrcVtxID = 3;
    
    // Count is the instance count (coefficient) of Cycles.
    int64               Count = 6;
    

    
}


// VtxGroup represents one or more 2x3 vertices that have the same cycle traces.
message VtxGroup {

    // Group ID assignment of home Vtx based on canonic cycle vector comparison ordering.
    // 0 denotes unassigned; first valid GroupID is 1.
    uint32              GroupID                     = 2;

    // GraphID is one-based index of the graph this VtxGroup belongs to.
    // In order for two VtxGroups to operate / consolidate they must reside in the same graph (particle).
    uint32              GraphID                     = 3; 
     
    // Count is the instance count (coefficient) of Cycles.
    int64               Count                       = 5;
    
    // If set, the sign of each odd cycle traces is inverted in Cycles[].
    OddSign             OddSign                     = 8;
    
    // When assigned from a 2x3 graph, each Vtx has 3 edges. 
    // After canonization, the edges of vertices having the same Cycles are consolidated into corresponding groups.
    repeated VtxEdge    Edges                       = 15;
    
    // Contribution to Traces == Count * OddSign( Cycles[] )
    repeated int64      Cycles                      = 16;
    
    
    //int64               MetricNumerator   = 8; // numerator of the metric
    //int64               MetricDenominator = 9; // numerator of the metric

}


// בְּרֵאשִׁ֖ית בָּרָ֣א אֱלֹהִ֑ים אֵ֥ת הַשָּׁמַ֖יִם וְאֵ֥ת הָאָֽרֶץ
message GraphTerm {
	uint32 VertexCount = 1; // number of vertices in the graph
	uint64 StructureID = 2; // graph structure enumeration ID
	uint64 VariantID   = 3; // graph structure variant ID; 0 always implies positive edges ("root variant")
	
    // IsPrime specifies if a graph system has constituent factors or not.
    // If a graph is prime, then it cannot be formed by combining any other particles.
	Bool IsPrime = 6;
	
	// IsCanonic specifies if this VariantID is canonic (i.e. first appearing) 
	Bool IsCanonic = 7;
	
    // C1 and C2 can be regarded as the instance count (or amplitude) of the odd and even traces terms.
    //
    // C1 is the instance count of odd traces -- negating is equivalent to flipping sign of odd traces, which is to flip all edge signs (including loops)
	int64 C1 = 11; 
	
    // C2 is the instance count of even traces and is only negative if expressing subtraction (rare)
	int64 C2 = 12;
}


// GrowOpCode is a graph-building op code, specifying a way to grow a 2x3 graph.
enum GrowOpCode {
	GrowOpCode_Nil           = 0;
	
    // Adds another edge connecting the existing vertices of a specified existing edge
	GrowOpCode_EdgeDuplicate = 1; 
	
    // Splits an existing edge into a new vertex, filling the first two slots in the new vertex
	GrowOpCode_EdgeSplit     = 2; 

    // Sprouts an existing vertex loop into a new vertex, filling the first edge slot in the new vertex
	GrowOpCode_EdgeSprout    = 3; 
}


// GrowStep is a graph building step, specifying how to add an vertex and/or edge
message GrowStep {
    GrowOpCode OpCode   = 1; // operation to perform
    int32      EdgeSign = 2; // +1 or -1
    uint32     VertexID = 3; // 1, 2, 3, 4, 5, ...
    uint32     SlotID   = 4; // 1, 2, or 3 
}


enum EncodingForm {
    EncodingForm_AutoDetect = 0;
    
    // e.g. "1; 1-2-3"
    EncodingForm_GraphExpr = 1;
    
    // Serialized sequence of GraphOps used to create this graph
    EncodingForm_BinaryOpString = 2;
    
    // Canonic binary enumeration ID formed from from the []GraphOps used to create this graph
    EncodingForm_EnumerationID = 3;

}
