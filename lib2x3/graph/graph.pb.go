// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib2x3/graph/graph.proto

package graph

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Bool int32

const (
	Bool_Unknown Bool = 0
	Bool_No      Bool = 1
	Bool_Yes     Bool = 3
)

var Bool_name = map[int32]string{
	0: "Bool_Unknown",
	1: "Bool_No",
	3: "Bool_Yes",
}

var Bool_value = map[string]int32{
	"Bool_Unknown": 0,
	"Bool_No":      1,
	"Bool_Yes":     3,
}

func (Bool) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23d0cecb80079ca5, []int{0}
}

// GroupID is a vertex group ID containing one or more Vtx.
type GroupID int32

const (
	GroupID_void      GroupID = 0
	GroupID_LoopVtx   GroupID = 1
	GroupID_LoopGroup GroupID = 2
	GroupID_G1        GroupID = 3
)

var GroupID_name = map[int32]string{
	0: "GroupID_void",
	1: "GroupID_LoopVtx",
	2: "GroupID_LoopGroup",
	3: "GroupID_G1",
}

var GroupID_value = map[string]int32{
	"GroupID_void":      0,
	"GroupID_LoopVtx":   1,
	"GroupID_LoopGroup": 2,
	"GroupID_G1":        3,
}

func (GroupID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23d0cecb80079ca5, []int{1}
}

// GraphStatus describes the state of a 2x3 graph.
type GraphStatus int32

const (
	// The graph is an in unassigned or otherwise invalid state
	GraphStatus_Invalid GraphStatus = 0
	// All Vtx have been validated as expressing a valid and complete graph.
	// VtxID, E_FromVtx. E_Sign have been assigned.
	// Each Vtx is in its own separate group and has exactly 3 VtxEdges.
	GraphStatus_Validated GraphStatus = 2
	// Next, edges that have matching DstVtxID and SrcVtxID are combined (summed).
	GraphStatus_Computed GraphStatus = 4
	// A cycle spectrum is performed on the graph to canonically order vtx groups.
	// Vtx determined to be in the same group are merged into a single vtx group.
	// Finally, all edges are normalized.
	GraphStatus_Canonized GraphStatus = 6
)

var GraphStatus_name = map[int32]string{
	0: "GraphStatus_Invalid",
	2: "GraphStatus_Validated",
	4: "GraphStatus_Computed",
	6: "GraphStatus_Canonized",
}

var GraphStatus_value = map[string]int32{
	"GraphStatus_Invalid":   0,
	"GraphStatus_Validated": 2,
	"GraphStatus_Computed":  4,
	"GraphStatus_Canonized": 6,
}

func (GraphStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23d0cecb80079ca5, []int{2}
}

type OddSign int32

const (
	OddSign_Natural OddSign = 0
	OddSign_Zero    OddSign = 1
	OddSign_Invert  OddSign = 2
)

var OddSign_name = map[int32]string{
	0: "OddSign_Natural",
	1: "OddSign_Zero",
	2: "OddSign_Invert",
}

var OddSign_value = map[string]int32{
	"OddSign_Natural": 0,
	"OddSign_Zero":    1,
	"OddSign_Invert":  2,
}

func (OddSign) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23d0cecb80079ca5, []int{3}
}

type TracesSign int32

const (
	TracesSign_Unknown  TracesSign = 0
	TracesSign_Zero     TracesSign = 1
	TracesSign_Positive TracesSign = 2
	TracesSign_Negative TracesSign = 3
)

var TracesSign_name = map[int32]string{
	0: "TracesSign_Unknown",
	1: "TracesSign_Zero",
	2: "TracesSign_Positive",
	3: "TracesSign_Negative",
}

var TracesSign_value = map[string]int32{
	"TracesSign_Unknown":  0,
	"TracesSign_Zero":     1,
	"TracesSign_Positive": 2,
	"TracesSign_Negative": 3,
}

func (TracesSign) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23d0cecb80079ca5, []int{4}
}

type TracesCycle int32

const (
	TracesCycle_Nil  TracesCycle = 0
	TracesCycle_Odd  TracesCycle = 1
	TracesCycle_Even TracesCycle = 2
)

var TracesCycle_name = map[int32]string{
	0: "TracesCycle_Nil",
	1: "TracesCycle_Odd",
	2: "TracesCycle_Even",
}

var TracesCycle_value = map[string]int32{
	"TracesCycle_Nil":  0,
	"TracesCycle_Odd":  1,
	"TracesCycle_Even": 2,
}

func (TracesCycle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23d0cecb80079ca5, []int{5}
}

// GrowOpCode is a graph-building op code, specifying a way to grow a 2x3 graph.
type GrowOpCode int32

const (
	GrowOpCode_Nil GrowOpCode = 0
	// Adds another edge connecting the existing vertices of a specified existing edge
	GrowOpCode_EdgeDuplicate GrowOpCode = 1
	// Splits an existing edge into a new vertex, filling the first two slots in the new vertex
	GrowOpCode_EdgeSplit GrowOpCode = 2
	// Sprouts an existing vertex loop into a new vertex, filling the first edge slot in the new vertex
	GrowOpCode_EdgeSprout GrowOpCode = 3
)

var GrowOpCode_name = map[int32]string{
	0: "GrowOpCode_Nil",
	1: "GrowOpCode_EdgeDuplicate",
	2: "GrowOpCode_EdgeSplit",
	3: "GrowOpCode_EdgeSprout",
}

var GrowOpCode_value = map[string]int32{
	"GrowOpCode_Nil":           0,
	"GrowOpCode_EdgeDuplicate": 1,
	"GrowOpCode_EdgeSplit":     2,
	"GrowOpCode_EdgeSprout":    3,
}

func (GrowOpCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23d0cecb80079ca5, []int{6}
}

type EncodingForm int32

const (
	EncodingForm_AutoDetect EncodingForm = 0
	// e.g. "1; 1-2-3"
	EncodingForm_GraphExpr EncodingForm = 1
	// Serialized sequence of GraphOps used to create this graph
	EncodingForm_BinaryOpString EncodingForm = 2
	// Canonic binary enumeration ID formed from from the []GraphOps used to create this graph
	EncodingForm_EnumerationID EncodingForm = 3
)

var EncodingForm_name = map[int32]string{
	0: "EncodingForm_AutoDetect",
	1: "EncodingForm_GraphExpr",
	2: "EncodingForm_BinaryOpString",
	3: "EncodingForm_EnumerationID",
}

var EncodingForm_value = map[string]int32{
	"EncodingForm_AutoDetect":     0,
	"EncodingForm_GraphExpr":      1,
	"EncodingForm_BinaryOpString": 2,
	"EncodingForm_EnumerationID":  3,
}

func (EncodingForm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_23d0cecb80079ca5, []int{7}
}

type CatalogState struct {
	MajorVers int32 `protobuf:"varint,1,opt,name=MajorVers,proto3" json:"MajorVers,omitempty"`
	MinorVers int32 `protobuf:"varint,2,opt,name=MinorVers,proto3" json:"MinorVers,omitempty"`
	// TraceCount is the Traces len for this Catalog's Traces index.
	// This effectively sets a vertex size limit for Graphs this Catalog can process.
	// DefaultCatalogTraceCount specifies the default TraceCount for new catalogs.
	TraceCount int32 `protobuf:"varint,10,opt,name=TraceCount,proto3" json:"TraceCount,omitempty"`
	// NumTraces[Nv] is the number of traces of in this catalog for a given number of vertices.
	// Note: NumTraces[0] is always 0 and len(NumTraces) == TraceCount+1
	NumTraces []uint64 `protobuf:"varint,11,rep,packed,name=NumTraces,proto3" json:"NumTraces,omitempty"`
	// NumPrimes[Nv] is the number of particle primes for a given number of vertices.
	// Note: NumPrimes[0] is always 0 and len(NumPrimes) == TraceCount+1
	NumPrimes []uint64 `protobuf:"varint,12,rep,packed,name=NumPrimes,proto3" json:"NumPrimes,omitempty"`
	// Set if this catalog is to auto-determine if a newly added Graph / Traces are primes.
	IsPrimeCatalog bool `protobuf:"varint,20,opt,name=IsPrimeCatalog,proto3" json:"IsPrimeCatalog,omitempty"`
}

func (m *CatalogState) Reset()      { *m = CatalogState{} }
func (*CatalogState) ProtoMessage() {}
func (*CatalogState) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d0cecb80079ca5, []int{0}
}
func (m *CatalogState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CatalogState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CatalogState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CatalogState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatalogState.Merge(m, src)
}
func (m *CatalogState) XXX_Size() int {
	return m.Size()
}
func (m *CatalogState) XXX_DiscardUnknown() {
	xxx_messageInfo_CatalogState.DiscardUnknown(m)
}

var xxx_messageInfo_CatalogState proto.InternalMessageInfo

func (m *CatalogState) GetMajorVers() int32 {
	if m != nil {
		return m.MajorVers
	}
	return 0
}

func (m *CatalogState) GetMinorVers() int32 {
	if m != nil {
		return m.MinorVers
	}
	return 0
}

func (m *CatalogState) GetTraceCount() int32 {
	if m != nil {
		return m.TraceCount
	}
	return 0
}

func (m *CatalogState) GetNumTraces() []uint64 {
	if m != nil {
		return m.NumTraces
	}
	return nil
}

func (m *CatalogState) GetNumPrimes() []uint64 {
	if m != nil {
		return m.NumPrimes
	}
	return nil
}

func (m *CatalogState) GetIsPrimeCatalog() bool {
	if m != nil {
		return m.IsPrimeCatalog
	}
	return false
}

// GraphDef is a particular vertex+edge assignment with bound names.
// Has similarities to a "Contributing structure" in quantum|chemistry lingo. https://en.wikipedia.org/wiki/Resonance_(chemistry)
type GraphDef struct {
	IsPrime Bool `protobuf:"varint,1,opt,name=IsPrime,proto3,enum=graph.Bool" json:"IsPrime,omitempty"`
	// If non-zero, the Traces of this graph has a registered ID.
	// These values can be used to lookup a graph's common ascii symbolic name, UTF8 symbolic name, or nickname
	TracesID uint64 `protobuf:"varint,2,opt,name=TracesID,proto3" json:"TracesID,omitempty"`
	GraphID  uint64 `protobuf:"varint,3,opt,name=GraphID,proto3" json:"GraphID,omitempty"`
	// A specific vertex+edge assignment
	GraphEncoding []byte `protobuf:"bytes,8,opt,name=GraphEncoding,proto3" json:"GraphEncoding,omitempty"`
	// Graph expr string that canonically express this graph and can therefore be used for easy graph equivalence testing.
	CanonicGraphExpr string `protobuf:"bytes,9,opt,name=CanonicGraphExpr,proto3" json:"CanonicGraphExpr,omitempty"`
	// Any number of graph expr strings that reduce to the same equivalent (canonic) graph.
	// This list is stored and maintained in sorted UTF8 order for binary search.
	GraphExprs []string `protobuf:"bytes,12,rep,name=GraphExprs,proto3" json:"GraphExprs,omitempty"`
}

func (m *GraphDef) Reset()      { *m = GraphDef{} }
func (*GraphDef) ProtoMessage() {}
func (*GraphDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d0cecb80079ca5, []int{1}
}
func (m *GraphDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphDef.Merge(m, src)
}
func (m *GraphDef) XXX_Size() int {
	return m.Size()
}
func (m *GraphDef) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphDef.DiscardUnknown(m)
}

var xxx_messageInfo_GraphDef proto.InternalMessageInfo

func (m *GraphDef) GetIsPrime() Bool {
	if m != nil {
		return m.IsPrime
	}
	return Bool_Unknown
}

func (m *GraphDef) GetTracesID() uint64 {
	if m != nil {
		return m.TracesID
	}
	return 0
}

func (m *GraphDef) GetGraphID() uint64 {
	if m != nil {
		return m.GraphID
	}
	return 0
}

func (m *GraphDef) GetGraphEncoding() []byte {
	if m != nil {
		return m.GraphEncoding
	}
	return nil
}

func (m *GraphDef) GetCanonicGraphExpr() string {
	if m != nil {
		return m.CanonicGraphExpr
	}
	return ""
}

func (m *GraphDef) GetGraphExprs() []string {
	if m != nil {
		return m.GraphExprs
	}
	return nil
}

// VtxEdge
type VtxEdge struct {
	// Initially assigned label: 1, 2, 3,..  (a one-based index ID)
	DstVtxID uint32 `protobuf:"varint,2,opt,name=DstVtxID,proto3" json:"DstVtxID,omitempty"`
	// Specifies the remote vertex of this edge (a one-based vtx index ID)
	SrcVtxID uint32 `protobuf:"varint,3,opt,name=SrcVtxID,proto3" json:"SrcVtxID,omitempty"`
	// Count is the instance count (coefficient) of Cycles.
	Count int64 `protobuf:"varint,6,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *VtxEdge) Reset()      { *m = VtxEdge{} }
func (*VtxEdge) ProtoMessage() {}
func (*VtxEdge) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d0cecb80079ca5, []int{2}
}
func (m *VtxEdge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VtxEdge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VtxEdge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VtxEdge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VtxEdge.Merge(m, src)
}
func (m *VtxEdge) XXX_Size() int {
	return m.Size()
}
func (m *VtxEdge) XXX_DiscardUnknown() {
	xxx_messageInfo_VtxEdge.DiscardUnknown(m)
}

var xxx_messageInfo_VtxEdge proto.InternalMessageInfo

func (m *VtxEdge) GetDstVtxID() uint32 {
	if m != nil {
		return m.DstVtxID
	}
	return 0
}

func (m *VtxEdge) GetSrcVtxID() uint32 {
	if m != nil {
		return m.SrcVtxID
	}
	return 0
}

func (m *VtxEdge) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// VtxGroup represents one or more 2x3 vertices that have the same cycle traces.
type VtxGroup struct {
	// Group ID assignment of home Vtx based on canonic cycle vector comparison ordering.
	// 0 denotes unassigned; first valid GroupID is 1.
	GroupID uint32 `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	// GraphID is one-based index of the graph this VtxGroup belongs to.
	// In order for two VtxGroups to operate / consolidate they must reside in the same graph (particle).
	GraphID uint32 `protobuf:"varint,3,opt,name=GraphID,proto3" json:"GraphID,omitempty"`
	// Count is the instance count (coefficient) of Cycles.
	Count int64 `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`
	// If set, the sign of each odd cycle traces is inverted in Cycles[].
	OddSign OddSign `protobuf:"varint,8,opt,name=OddSign,proto3,enum=graph.OddSign" json:"OddSign,omitempty"`
	// When assigned from a 2x3 graph, each Vtx has 3 edges.
	// After canonization, the edges of vertices having the same Cycles are consolidated into corresponding groups.
	Edges []*VtxEdge `protobuf:"bytes,15,rep,name=Edges,proto3" json:"Edges,omitempty"`
	// Contribution to Traces == Count * OddSign( Cycles[] )
	Cycles []int64 `protobuf:"varint,16,rep,packed,name=Cycles,proto3" json:"Cycles,omitempty"`
}

func (m *VtxGroup) Reset()      { *m = VtxGroup{} }
func (*VtxGroup) ProtoMessage() {}
func (*VtxGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d0cecb80079ca5, []int{3}
}
func (m *VtxGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VtxGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VtxGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VtxGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VtxGroup.Merge(m, src)
}
func (m *VtxGroup) XXX_Size() int {
	return m.Size()
}
func (m *VtxGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_VtxGroup.DiscardUnknown(m)
}

var xxx_messageInfo_VtxGroup proto.InternalMessageInfo

func (m *VtxGroup) GetGroupID() uint32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *VtxGroup) GetGraphID() uint32 {
	if m != nil {
		return m.GraphID
	}
	return 0
}

func (m *VtxGroup) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *VtxGroup) GetOddSign() OddSign {
	if m != nil {
		return m.OddSign
	}
	return OddSign_Natural
}

func (m *VtxGroup) GetEdges() []*VtxEdge {
	if m != nil {
		return m.Edges
	}
	return nil
}

func (m *VtxGroup) GetCycles() []int64 {
	if m != nil {
		return m.Cycles
	}
	return nil
}

// בְּרֵאשִׁ֖ית בָּרָ֣א אֱלֹהִ֑ים אֵ֥ת הַשָּׁמַ֖יִם וְאֵ֥ת הָאָֽרֶץ
type GraphTerm struct {
	VertexCount uint32 `protobuf:"varint,1,opt,name=VertexCount,proto3" json:"VertexCount,omitempty"`
	StructureID uint64 `protobuf:"varint,2,opt,name=StructureID,proto3" json:"StructureID,omitempty"`
	VariantID   uint64 `protobuf:"varint,3,opt,name=VariantID,proto3" json:"VariantID,omitempty"`
	// IsPrime specifies if a graph system has constituent factors or not.
	// If a graph is prime, then it cannot be formed by combining any other particles.
	IsPrime Bool `protobuf:"varint,6,opt,name=IsPrime,proto3,enum=graph.Bool" json:"IsPrime,omitempty"`
	// IsCanonic specifies if this VariantID is canonic (i.e. first appearing)
	IsCanonic Bool `protobuf:"varint,7,opt,name=IsCanonic,proto3,enum=graph.Bool" json:"IsCanonic,omitempty"`
	// C1 and C2 can be regarded as the instance count (or amplitude) of the odd and even traces terms.
	//
	// C1 is the instance count of odd traces -- negating is equivalent to flipping sign of odd traces, which is to flip all edge signs (including loops)
	C1 int64 `protobuf:"varint,11,opt,name=C1,proto3" json:"C1,omitempty"`
	// C2 is the instance count of even traces and is only negative if expressing subtraction (rare)
	C2 int64 `protobuf:"varint,12,opt,name=C2,proto3" json:"C2,omitempty"`
}

func (m *GraphTerm) Reset()      { *m = GraphTerm{} }
func (*GraphTerm) ProtoMessage() {}
func (*GraphTerm) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d0cecb80079ca5, []int{4}
}
func (m *GraphTerm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphTerm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphTerm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraphTerm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphTerm.Merge(m, src)
}
func (m *GraphTerm) XXX_Size() int {
	return m.Size()
}
func (m *GraphTerm) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphTerm.DiscardUnknown(m)
}

var xxx_messageInfo_GraphTerm proto.InternalMessageInfo

func (m *GraphTerm) GetVertexCount() uint32 {
	if m != nil {
		return m.VertexCount
	}
	return 0
}

func (m *GraphTerm) GetStructureID() uint64 {
	if m != nil {
		return m.StructureID
	}
	return 0
}

func (m *GraphTerm) GetVariantID() uint64 {
	if m != nil {
		return m.VariantID
	}
	return 0
}

func (m *GraphTerm) GetIsPrime() Bool {
	if m != nil {
		return m.IsPrime
	}
	return Bool_Unknown
}

func (m *GraphTerm) GetIsCanonic() Bool {
	if m != nil {
		return m.IsCanonic
	}
	return Bool_Unknown
}

func (m *GraphTerm) GetC1() int64 {
	if m != nil {
		return m.C1
	}
	return 0
}

func (m *GraphTerm) GetC2() int64 {
	if m != nil {
		return m.C2
	}
	return 0
}

// GrowStep is a graph building step, specifying how to add an vertex and/or edge
type GrowStep struct {
	OpCode   GrowOpCode `protobuf:"varint,1,opt,name=OpCode,proto3,enum=graph.GrowOpCode" json:"OpCode,omitempty"`
	EdgeSign int32      `protobuf:"varint,2,opt,name=EdgeSign,proto3" json:"EdgeSign,omitempty"`
	VertexID uint32     `protobuf:"varint,3,opt,name=VertexID,proto3" json:"VertexID,omitempty"`
	SlotID   uint32     `protobuf:"varint,4,opt,name=SlotID,proto3" json:"SlotID,omitempty"`
}

func (m *GrowStep) Reset()      { *m = GrowStep{} }
func (*GrowStep) ProtoMessage() {}
func (*GrowStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_23d0cecb80079ca5, []int{5}
}
func (m *GrowStep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrowStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GrowStep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GrowStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrowStep.Merge(m, src)
}
func (m *GrowStep) XXX_Size() int {
	return m.Size()
}
func (m *GrowStep) XXX_DiscardUnknown() {
	xxx_messageInfo_GrowStep.DiscardUnknown(m)
}

var xxx_messageInfo_GrowStep proto.InternalMessageInfo

func (m *GrowStep) GetOpCode() GrowOpCode {
	if m != nil {
		return m.OpCode
	}
	return GrowOpCode_Nil
}

func (m *GrowStep) GetEdgeSign() int32 {
	if m != nil {
		return m.EdgeSign
	}
	return 0
}

func (m *GrowStep) GetVertexID() uint32 {
	if m != nil {
		return m.VertexID
	}
	return 0
}

func (m *GrowStep) GetSlotID() uint32 {
	if m != nil {
		return m.SlotID
	}
	return 0
}

func init() {
	proto.RegisterEnum("graph.Bool", Bool_name, Bool_value)
	proto.RegisterEnum("graph.GroupID", GroupID_name, GroupID_value)
	proto.RegisterEnum("graph.GraphStatus", GraphStatus_name, GraphStatus_value)
	proto.RegisterEnum("graph.OddSign", OddSign_name, OddSign_value)
	proto.RegisterEnum("graph.TracesSign", TracesSign_name, TracesSign_value)
	proto.RegisterEnum("graph.TracesCycle", TracesCycle_name, TracesCycle_value)
	proto.RegisterEnum("graph.GrowOpCode", GrowOpCode_name, GrowOpCode_value)
	proto.RegisterEnum("graph.EncodingForm", EncodingForm_name, EncodingForm_value)
	proto.RegisterType((*CatalogState)(nil), "graph.CatalogState")
	proto.RegisterType((*GraphDef)(nil), "graph.GraphDef")
	proto.RegisterType((*VtxEdge)(nil), "graph.VtxEdge")
	proto.RegisterType((*VtxGroup)(nil), "graph.VtxGroup")
	proto.RegisterType((*GraphTerm)(nil), "graph.GraphTerm")
	proto.RegisterType((*GrowStep)(nil), "graph.GrowStep")
}

func init() { proto.RegisterFile("lib2x3/graph/graph.proto", fileDescriptor_23d0cecb80079ca5) }

var fileDescriptor_23d0cecb80079ca5 = []byte{
	// 961 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xd6, 0x92, 0xb6, 0x7e, 0x46, 0x8a, 0xbc, 0x59, 0x3b, 0x36, 0xeb, 0x04, 0xac, 0x20, 0xa4,
	0x85, 0xa2, 0x43, 0x0a, 0xdb, 0x7d, 0x81, 0x5a, 0x72, 0x0d, 0x01, 0x8d, 0x1d, 0x50, 0xa9, 0x82,
	0xf6, 0x22, 0x30, 0xe2, 0x56, 0x65, 0x43, 0x71, 0x89, 0xe5, 0x52, 0x51, 0x7a, 0xea, 0xa5, 0x40,
	0x8f, 0x7d, 0x8c, 0x3e, 0x44, 0x1f, 0xa0, 0xa7, 0xc2, 0xc7, 0xf4, 0xd4, 0x5a, 0xbe, 0xf4, 0x98,
	0x47, 0x28, 0xf6, 0x87, 0x14, 0xed, 0x00, 0xbd, 0xd8, 0xfb, 0x7d, 0xdf, 0x70, 0x38, 0xf3, 0xcd,
	0x70, 0x05, 0x4e, 0x14, 0xbe, 0x3a, 0x5e, 0x9d, 0x7c, 0x36, 0xe7, 0x7e, 0xf2, 0xbd, 0xfe, 0xfb,
	0x34, 0xe1, 0x4c, 0x30, 0xb2, 0xad, 0x40, 0xf7, 0x4f, 0x04, 0xad, 0x81, 0x2f, 0xfc, 0x88, 0xcd,
	0xc7, 0xc2, 0x17, 0x94, 0x3c, 0x82, 0xc6, 0x33, 0xff, 0x07, 0xc6, 0x27, 0x94, 0xa7, 0x0e, 0xea,
	0xa0, 0xde, 0xb6, 0xb7, 0x21, 0x94, 0x1a, 0xc6, 0x46, 0xb5, 0x8c, 0x9a, 0x13, 0xc4, 0x05, 0x78,
	0xc1, 0xfd, 0x19, 0x1d, 0xb0, 0x2c, 0x16, 0x0e, 0x28, 0xb9, 0xc4, 0xc8, 0xa7, 0x2f, 0xb2, 0x85,
	0x22, 0x52, 0xa7, 0xd9, 0xb1, 0x7b, 0x5b, 0xde, 0x86, 0x30, 0xea, 0x73, 0x1e, 0x2e, 0x68, 0xea,
	0xb4, 0x0a, 0x55, 0x13, 0xe4, 0x53, 0x68, 0x8f, 0x52, 0x75, 0x36, 0xe5, 0x3a, 0x7b, 0x1d, 0xd4,
	0xab, 0x7b, 0x77, 0xd8, 0xee, 0x5f, 0x08, 0xea, 0xe7, 0xb2, 0xb5, 0x21, 0xfd, 0x8e, 0x7c, 0x02,
	0x35, 0x23, 0xab, 0x56, 0xda, 0xc7, 0xcd, 0xa7, 0xda, 0x83, 0x53, 0xc6, 0x22, 0x2f, 0xd7, 0xc8,
	0x21, 0xd4, 0x75, 0x0d, 0xa3, 0xa1, 0x6a, 0x6a, 0xcb, 0x2b, 0x30, 0x71, 0xa0, 0xa6, 0xd2, 0x8d,
	0x86, 0x8e, 0xad, 0xa4, 0x1c, 0x92, 0xc7, 0x70, 0x4f, 0x1d, 0xcf, 0xe2, 0x19, 0x0b, 0xc2, 0x78,
	0xee, 0xd4, 0x3b, 0xa8, 0xd7, 0xf2, 0x6e, 0x93, 0xa4, 0x0f, 0x78, 0xe0, 0xc7, 0x2c, 0x0e, 0x67,
	0x9a, 0x5f, 0x25, 0xdc, 0x69, 0x74, 0x50, 0xaf, 0xe1, 0x7d, 0xc0, 0x4b, 0xff, 0x0a, 0xa0, 0x2d,
	0x68, 0x78, 0x25, 0xa6, 0xfb, 0x12, 0x6a, 0x13, 0xb1, 0x3a, 0x0b, 0xe6, 0xaa, 0xe4, 0x61, 0x2a,
	0x26, 0x62, 0x65, 0x4a, 0xbe, 0xe7, 0x15, 0x58, 0x6a, 0x63, 0x3e, 0xd3, 0x9a, 0xad, 0xb5, 0x1c,
	0x93, 0x3d, 0xd8, 0xd6, 0xd3, 0xa9, 0x76, 0x50, 0xcf, 0xf6, 0x34, 0xe8, 0xfe, 0x8e, 0xa0, 0x3e,
	0x11, 0xab, 0x73, 0xce, 0xb2, 0x44, 0x77, 0xcc, 0xb2, 0xa4, 0xc8, 0x9c, 0xc3, 0xbb, 0x5e, 0xdc,
	0xdb, 0x78, 0x51, 0xa4, 0xdd, 0x2e, 0xa5, 0x25, 0x3d, 0xa8, 0x5d, 0x06, 0xc1, 0x38, 0x9c, 0xc7,
	0xca, 0x9b, 0xf6, 0x71, 0xdb, 0xd8, 0x6f, 0x58, 0x2f, 0x97, 0xc9, 0x63, 0xd8, 0x96, 0x6d, 0xa5,
	0xce, 0x4e, 0xc7, 0xee, 0x35, 0x8b, 0x38, 0xd3, 0xad, 0xa7, 0x45, 0xb2, 0x0f, 0xd5, 0xc1, 0xdb,
	0x59, 0x44, 0x53, 0x07, 0x77, 0xec, 0x9e, 0xed, 0x19, 0xd4, 0xfd, 0x1b, 0x41, 0x43, 0x55, 0xf2,
	0x82, 0xf2, 0x05, 0xe9, 0x40, 0x73, 0x42, 0xb9, 0xa0, 0x2b, 0x5d, 0x11, 0x52, 0x95, 0x96, 0x29,
	0x19, 0x31, 0x16, 0x3c, 0x9b, 0x89, 0x8c, 0xd3, 0x62, 0xe4, 0x65, 0x4a, 0xee, 0xe2, 0xc4, 0xe7,
	0xa1, 0x1f, 0x8b, 0x62, 0xee, 0x1b, 0xa2, 0xbc, 0x56, 0xd5, 0xff, 0x59, 0xab, 0x27, 0xd0, 0x18,
	0xa5, 0x66, 0xc8, 0x4e, 0xed, 0xc3, 0xc0, 0x8d, 0x4a, 0xda, 0x60, 0x0d, 0x8e, 0x9c, 0xa6, 0x32,
	0xcf, 0x1a, 0x1c, 0x29, 0x7c, 0xec, 0xb4, 0x0c, 0x3e, 0xee, 0xfe, 0xac, 0xb6, 0x9a, 0xbd, 0x19,
	0x0b, 0x9a, 0x90, 0x27, 0x50, 0xbd, 0x4c, 0x06, 0x2c, 0xc8, 0x97, 0xfa, 0xbe, 0x49, 0x2a, 0x03,
	0xb4, 0xe0, 0x99, 0x00, 0xb9, 0x0a, 0xd2, 0x3a, 0x35, 0x02, 0xfd, 0xb9, 0x16, 0x58, 0x6a, 0xda,
	0x94, 0xcd, 0x9a, 0xe4, 0x58, 0x3a, 0x3d, 0x8e, 0x98, 0x6c, 0x7e, 0x4b, 0x29, 0x06, 0xf5, 0x4f,
	0x60, 0x4b, 0x96, 0x4e, 0x30, 0xb4, 0xe4, 0xff, 0xe9, 0xd7, 0xf1, 0xeb, 0x98, 0xbd, 0x89, 0x71,
	0x85, 0x34, 0xa1, 0xa6, 0x98, 0x0b, 0x86, 0x11, 0x69, 0x41, 0x5d, 0x81, 0x6f, 0x68, 0x8a, 0xed,
	0xfe, 0xcb, 0x62, 0xa1, 0xe4, 0x73, 0xe6, 0x38, 0x5d, 0xb2, 0x30, 0xc0, 0x15, 0xb2, 0x0b, 0x3b,
	0x39, 0xf3, 0x15, 0x63, 0xc9, 0x44, 0xac, 0x30, 0x22, 0x0f, 0xe0, 0x7e, 0x99, 0x54, 0x67, 0x6c,
	0x91, 0xb6, 0xfc, 0x3e, 0x34, 0x7d, 0x7e, 0x84, 0xed, 0xfe, 0x12, 0x9a, 0x6a, 0xec, 0xf2, 0xe6,
	0xca, 0x52, 0x72, 0x00, 0xbb, 0x25, 0x38, 0x1d, 0xc5, 0x4b, 0x3f, 0x52, 0xef, 0xf8, 0x08, 0x1e,
	0x94, 0x85, 0x89, 0xa4, 0x7d, 0x41, 0x03, 0x6c, 0x11, 0x07, 0xf6, 0xca, 0xd2, 0x80, 0x2d, 0x92,
	0x4c, 0x2a, 0x5b, 0x77, 0x1f, 0xd2, 0x93, 0xfa, 0x91, 0x06, 0xb8, 0xda, 0x1f, 0x16, 0x7b, 0x2d,
	0xcb, 0x37, 0xc7, 0xe9, 0x85, 0x2f, 0x32, 0xee, 0x47, 0xb8, 0x22, 0xbb, 0xcc, 0xc9, 0x6f, 0x29,
	0x97, 0x86, 0x10, 0x68, 0xe7, 0xcc, 0x28, 0x5e, 0x52, 0x2e, 0xb0, 0xd5, 0x7f, 0x6d, 0x6e, 0xcb,
	0x54, 0x25, 0xda, 0x07, 0xb2, 0x41, 0x25, 0x5f, 0x77, 0x61, 0xa7, 0xc4, 0x9b, 0x74, 0x07, 0xb0,
	0x5b, 0x22, 0x9f, 0xb3, 0x34, 0x14, 0xe1, 0x92, 0x62, 0xeb, 0x8e, 0x70, 0x41, 0xe7, 0xbe, 0x12,
	0xec, 0xfe, 0x33, 0x68, 0x6a, 0x41, 0x7d, 0x32, 0x9b, 0xac, 0x0a, 0x4e, 0x2f, 0xc2, 0xa8, 0xfc,
	0x2a, 0x4d, 0x5e, 0x06, 0x01, 0x46, 0x64, 0x0f, 0x70, 0x99, 0x3c, 0x5b, 0xd2, 0x18, 0x5b, 0xfd,
	0x54, 0x4d, 0xc2, 0x6c, 0x9b, 0xec, 0x6e, 0x83, 0x4c, 0xb2, 0x47, 0xe0, 0x94, 0x38, 0xb9, 0x74,
	0xc3, 0x2c, 0x89, 0xc2, 0x99, 0x2f, 0x28, 0x46, 0xda, 0xf6, 0x5b, 0xea, 0x38, 0x89, 0x42, 0x81,
	0x2d, 0x6d, 0xfb, 0x1d, 0x85, 0xb3, 0x4c, 0x60, 0xbb, 0xff, 0x0b, 0x82, 0x56, 0x7e, 0xaf, 0x7e,
	0xc9, 0xf8, 0x82, 0x3c, 0x84, 0x83, 0x32, 0x9e, 0x7e, 0x91, 0x09, 0x36, 0xa4, 0x82, 0xce, 0x04,
	0xae, 0x90, 0x43, 0xd8, 0xbf, 0x25, 0x16, 0xf7, 0x28, 0x46, 0xe4, 0x63, 0x78, 0x78, 0x4b, 0x3b,
	0x0d, 0x63, 0x9f, 0xbf, 0xbd, 0x4c, 0xc6, 0x82, 0x87, 0xf1, 0x1c, 0x5b, 0xc4, 0x85, 0xc3, 0x5b,
	0x01, 0x67, 0x71, 0xb6, 0xa0, 0xdc, 0x17, 0x21, 0x8b, 0x47, 0x43, 0x6c, 0x9f, 0x7e, 0x7e, 0x75,
	0xed, 0x56, 0xde, 0x5d, 0xbb, 0x95, 0xf7, 0xd7, 0x2e, 0xfa, 0x69, 0xed, 0xa2, 0xdf, 0xd6, 0x2e,
	0xfa, 0x63, 0xed, 0xa2, 0xab, 0xb5, 0x8b, 0xfe, 0x59, 0xbb, 0xe8, 0xdf, 0xb5, 0x5b, 0x79, 0xbf,
	0x76, 0xd1, 0xaf, 0x37, 0x6e, 0xe5, 0xea, 0xc6, 0xad, 0xbc, 0xbb, 0x71, 0x2b, 0xaf, 0xaa, 0xea,
	0xa7, 0xf7, 0xe4, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x5e, 0xf2, 0x95, 0x96, 0x07, 0x00,
	0x00,
}

func (x Bool) String() string {
	s, ok := Bool_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x GroupID) String() string {
	s, ok := GroupID_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x GraphStatus) String() string {
	s, ok := GraphStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OddSign) String() string {
	s, ok := OddSign_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TracesSign) String() string {
	s, ok := TracesSign_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TracesCycle) String() string {
	s, ok := TracesCycle_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x GrowOpCode) String() string {
	s, ok := GrowOpCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EncodingForm) String() string {
	s, ok := EncodingForm_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *CatalogState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CatalogState)
	if !ok {
		that2, ok := that.(CatalogState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MajorVers != that1.MajorVers {
		return false
	}
	if this.MinorVers != that1.MinorVers {
		return false
	}
	if this.TraceCount != that1.TraceCount {
		return false
	}
	if len(this.NumTraces) != len(that1.NumTraces) {
		return false
	}
	for i := range this.NumTraces {
		if this.NumTraces[i] != that1.NumTraces[i] {
			return false
		}
	}
	if len(this.NumPrimes) != len(that1.NumPrimes) {
		return false
	}
	for i := range this.NumPrimes {
		if this.NumPrimes[i] != that1.NumPrimes[i] {
			return false
		}
	}
	if this.IsPrimeCatalog != that1.IsPrimeCatalog {
		return false
	}
	return true
}
func (this *GraphDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphDef)
	if !ok {
		that2, ok := that.(GraphDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsPrime != that1.IsPrime {
		return false
	}
	if this.TracesID != that1.TracesID {
		return false
	}
	if this.GraphID != that1.GraphID {
		return false
	}
	if !bytes.Equal(this.GraphEncoding, that1.GraphEncoding) {
		return false
	}
	if this.CanonicGraphExpr != that1.CanonicGraphExpr {
		return false
	}
	if len(this.GraphExprs) != len(that1.GraphExprs) {
		return false
	}
	for i := range this.GraphExprs {
		if this.GraphExprs[i] != that1.GraphExprs[i] {
			return false
		}
	}
	return true
}
func (this *VtxEdge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VtxEdge)
	if !ok {
		that2, ok := that.(VtxEdge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DstVtxID != that1.DstVtxID {
		return false
	}
	if this.SrcVtxID != that1.SrcVtxID {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *VtxGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VtxGroup)
	if !ok {
		that2, ok := that.(VtxGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GroupID != that1.GroupID {
		return false
	}
	if this.GraphID != that1.GraphID {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.OddSign != that1.OddSign {
		return false
	}
	if len(this.Edges) != len(that1.Edges) {
		return false
	}
	for i := range this.Edges {
		if !this.Edges[i].Equal(that1.Edges[i]) {
			return false
		}
	}
	if len(this.Cycles) != len(that1.Cycles) {
		return false
	}
	for i := range this.Cycles {
		if this.Cycles[i] != that1.Cycles[i] {
			return false
		}
	}
	return true
}
func (this *GraphTerm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GraphTerm)
	if !ok {
		that2, ok := that.(GraphTerm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VertexCount != that1.VertexCount {
		return false
	}
	if this.StructureID != that1.StructureID {
		return false
	}
	if this.VariantID != that1.VariantID {
		return false
	}
	if this.IsPrime != that1.IsPrime {
		return false
	}
	if this.IsCanonic != that1.IsCanonic {
		return false
	}
	if this.C1 != that1.C1 {
		return false
	}
	if this.C2 != that1.C2 {
		return false
	}
	return true
}
func (this *GrowStep) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GrowStep)
	if !ok {
		that2, ok := that.(GrowStep)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OpCode != that1.OpCode {
		return false
	}
	if this.EdgeSign != that1.EdgeSign {
		return false
	}
	if this.VertexID != that1.VertexID {
		return false
	}
	if this.SlotID != that1.SlotID {
		return false
	}
	return true
}
func (this *CatalogState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&graph.CatalogState{")
	s = append(s, "MajorVers: "+fmt.Sprintf("%#v", this.MajorVers)+",\n")
	s = append(s, "MinorVers: "+fmt.Sprintf("%#v", this.MinorVers)+",\n")
	s = append(s, "TraceCount: "+fmt.Sprintf("%#v", this.TraceCount)+",\n")
	s = append(s, "NumTraces: "+fmt.Sprintf("%#v", this.NumTraces)+",\n")
	s = append(s, "NumPrimes: "+fmt.Sprintf("%#v", this.NumPrimes)+",\n")
	s = append(s, "IsPrimeCatalog: "+fmt.Sprintf("%#v", this.IsPrimeCatalog)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&graph.GraphDef{")
	s = append(s, "IsPrime: "+fmt.Sprintf("%#v", this.IsPrime)+",\n")
	s = append(s, "TracesID: "+fmt.Sprintf("%#v", this.TracesID)+",\n")
	s = append(s, "GraphID: "+fmt.Sprintf("%#v", this.GraphID)+",\n")
	s = append(s, "GraphEncoding: "+fmt.Sprintf("%#v", this.GraphEncoding)+",\n")
	s = append(s, "CanonicGraphExpr: "+fmt.Sprintf("%#v", this.CanonicGraphExpr)+",\n")
	s = append(s, "GraphExprs: "+fmt.Sprintf("%#v", this.GraphExprs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VtxEdge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&graph.VtxEdge{")
	s = append(s, "DstVtxID: "+fmt.Sprintf("%#v", this.DstVtxID)+",\n")
	s = append(s, "SrcVtxID: "+fmt.Sprintf("%#v", this.SrcVtxID)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VtxGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&graph.VtxGroup{")
	s = append(s, "GroupID: "+fmt.Sprintf("%#v", this.GroupID)+",\n")
	s = append(s, "GraphID: "+fmt.Sprintf("%#v", this.GraphID)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "OddSign: "+fmt.Sprintf("%#v", this.OddSign)+",\n")
	if this.Edges != nil {
		s = append(s, "Edges: "+fmt.Sprintf("%#v", this.Edges)+",\n")
	}
	s = append(s, "Cycles: "+fmt.Sprintf("%#v", this.Cycles)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTerm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&graph.GraphTerm{")
	s = append(s, "VertexCount: "+fmt.Sprintf("%#v", this.VertexCount)+",\n")
	s = append(s, "StructureID: "+fmt.Sprintf("%#v", this.StructureID)+",\n")
	s = append(s, "VariantID: "+fmt.Sprintf("%#v", this.VariantID)+",\n")
	s = append(s, "IsPrime: "+fmt.Sprintf("%#v", this.IsPrime)+",\n")
	s = append(s, "IsCanonic: "+fmt.Sprintf("%#v", this.IsCanonic)+",\n")
	s = append(s, "C1: "+fmt.Sprintf("%#v", this.C1)+",\n")
	s = append(s, "C2: "+fmt.Sprintf("%#v", this.C2)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GrowStep) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&graph.GrowStep{")
	s = append(s, "OpCode: "+fmt.Sprintf("%#v", this.OpCode)+",\n")
	s = append(s, "EdgeSign: "+fmt.Sprintf("%#v", this.EdgeSign)+",\n")
	s = append(s, "VertexID: "+fmt.Sprintf("%#v", this.VertexID)+",\n")
	s = append(s, "SlotID: "+fmt.Sprintf("%#v", this.SlotID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGraph(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CatalogState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CatalogState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CatalogState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPrimeCatalog {
		i--
		if m.IsPrimeCatalog {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.NumPrimes) > 0 {
		dAtA2 := make([]byte, len(m.NumPrimes)*10)
		var j1 int
		for _, num := range m.NumPrimes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGraph(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x62
	}
	if len(m.NumTraces) > 0 {
		dAtA4 := make([]byte, len(m.NumTraces)*10)
		var j3 int
		for _, num := range m.NumTraces {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintGraph(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x5a
	}
	if m.TraceCount != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.TraceCount))
		i--
		dAtA[i] = 0x50
	}
	if m.MinorVers != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.MinorVers))
		i--
		dAtA[i] = 0x10
	}
	if m.MajorVers != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.MajorVers))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GraphDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphDef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphDef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GraphExprs) > 0 {
		for iNdEx := len(m.GraphExprs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GraphExprs[iNdEx])
			copy(dAtA[i:], m.GraphExprs[iNdEx])
			i = encodeVarintGraph(dAtA, i, uint64(len(m.GraphExprs[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.CanonicGraphExpr) > 0 {
		i -= len(m.CanonicGraphExpr)
		copy(dAtA[i:], m.CanonicGraphExpr)
		i = encodeVarintGraph(dAtA, i, uint64(len(m.CanonicGraphExpr)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.GraphEncoding) > 0 {
		i -= len(m.GraphEncoding)
		copy(dAtA[i:], m.GraphEncoding)
		i = encodeVarintGraph(dAtA, i, uint64(len(m.GraphEncoding)))
		i--
		dAtA[i] = 0x42
	}
	if m.GraphID != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.GraphID))
		i--
		dAtA[i] = 0x18
	}
	if m.TracesID != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.TracesID))
		i--
		dAtA[i] = 0x10
	}
	if m.IsPrime != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.IsPrime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VtxEdge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VtxEdge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VtxEdge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x30
	}
	if m.SrcVtxID != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.SrcVtxID))
		i--
		dAtA[i] = 0x18
	}
	if m.DstVtxID != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.DstVtxID))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *VtxGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VtxGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VtxGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cycles) > 0 {
		dAtA6 := make([]byte, len(m.Cycles)*10)
		var j5 int
		for _, num1 := range m.Cycles {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintGraph(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Edges) > 0 {
		for iNdEx := len(m.Edges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Edges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGraph(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.OddSign != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.OddSign))
		i--
		dAtA[i] = 0x40
	}
	if m.Count != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x28
	}
	if m.GraphID != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.GraphID))
		i--
		dAtA[i] = 0x18
	}
	if m.GroupID != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.GroupID))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *GraphTerm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTerm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraphTerm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.C2 != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.C2))
		i--
		dAtA[i] = 0x60
	}
	if m.C1 != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.C1))
		i--
		dAtA[i] = 0x58
	}
	if m.IsCanonic != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.IsCanonic))
		i--
		dAtA[i] = 0x38
	}
	if m.IsPrime != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.IsPrime))
		i--
		dAtA[i] = 0x30
	}
	if m.VariantID != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.VariantID))
		i--
		dAtA[i] = 0x18
	}
	if m.StructureID != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.StructureID))
		i--
		dAtA[i] = 0x10
	}
	if m.VertexCount != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.VertexCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GrowStep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrowStep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrowStep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SlotID != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.SlotID))
		i--
		dAtA[i] = 0x20
	}
	if m.VertexID != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.VertexID))
		i--
		dAtA[i] = 0x18
	}
	if m.EdgeSign != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.EdgeSign))
		i--
		dAtA[i] = 0x10
	}
	if m.OpCode != 0 {
		i = encodeVarintGraph(dAtA, i, uint64(m.OpCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGraph(dAtA []byte, offset int, v uint64) int {
	offset -= sovGraph(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CatalogState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MajorVers != 0 {
		n += 1 + sovGraph(uint64(m.MajorVers))
	}
	if m.MinorVers != 0 {
		n += 1 + sovGraph(uint64(m.MinorVers))
	}
	if m.TraceCount != 0 {
		n += 1 + sovGraph(uint64(m.TraceCount))
	}
	if len(m.NumTraces) > 0 {
		l = 0
		for _, e := range m.NumTraces {
			l += sovGraph(uint64(e))
		}
		n += 1 + sovGraph(uint64(l)) + l
	}
	if len(m.NumPrimes) > 0 {
		l = 0
		for _, e := range m.NumPrimes {
			l += sovGraph(uint64(e))
		}
		n += 1 + sovGraph(uint64(l)) + l
	}
	if m.IsPrimeCatalog {
		n += 3
	}
	return n
}

func (m *GraphDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPrime != 0 {
		n += 1 + sovGraph(uint64(m.IsPrime))
	}
	if m.TracesID != 0 {
		n += 1 + sovGraph(uint64(m.TracesID))
	}
	if m.GraphID != 0 {
		n += 1 + sovGraph(uint64(m.GraphID))
	}
	l = len(m.GraphEncoding)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	l = len(m.CanonicGraphExpr)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	if len(m.GraphExprs) > 0 {
		for _, s := range m.GraphExprs {
			l = len(s)
			n += 1 + l + sovGraph(uint64(l))
		}
	}
	return n
}

func (m *VtxEdge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DstVtxID != 0 {
		n += 1 + sovGraph(uint64(m.DstVtxID))
	}
	if m.SrcVtxID != 0 {
		n += 1 + sovGraph(uint64(m.SrcVtxID))
	}
	if m.Count != 0 {
		n += 1 + sovGraph(uint64(m.Count))
	}
	return n
}

func (m *VtxGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupID != 0 {
		n += 1 + sovGraph(uint64(m.GroupID))
	}
	if m.GraphID != 0 {
		n += 1 + sovGraph(uint64(m.GraphID))
	}
	if m.Count != 0 {
		n += 1 + sovGraph(uint64(m.Count))
	}
	if m.OddSign != 0 {
		n += 1 + sovGraph(uint64(m.OddSign))
	}
	if len(m.Edges) > 0 {
		for _, e := range m.Edges {
			l = e.Size()
			n += 1 + l + sovGraph(uint64(l))
		}
	}
	if len(m.Cycles) > 0 {
		l = 0
		for _, e := range m.Cycles {
			l += sovGraph(uint64(e))
		}
		n += 2 + sovGraph(uint64(l)) + l
	}
	return n
}

func (m *GraphTerm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VertexCount != 0 {
		n += 1 + sovGraph(uint64(m.VertexCount))
	}
	if m.StructureID != 0 {
		n += 1 + sovGraph(uint64(m.StructureID))
	}
	if m.VariantID != 0 {
		n += 1 + sovGraph(uint64(m.VariantID))
	}
	if m.IsPrime != 0 {
		n += 1 + sovGraph(uint64(m.IsPrime))
	}
	if m.IsCanonic != 0 {
		n += 1 + sovGraph(uint64(m.IsCanonic))
	}
	if m.C1 != 0 {
		n += 1 + sovGraph(uint64(m.C1))
	}
	if m.C2 != 0 {
		n += 1 + sovGraph(uint64(m.C2))
	}
	return n
}

func (m *GrowStep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpCode != 0 {
		n += 1 + sovGraph(uint64(m.OpCode))
	}
	if m.EdgeSign != 0 {
		n += 1 + sovGraph(uint64(m.EdgeSign))
	}
	if m.VertexID != 0 {
		n += 1 + sovGraph(uint64(m.VertexID))
	}
	if m.SlotID != 0 {
		n += 1 + sovGraph(uint64(m.SlotID))
	}
	return n
}

func sovGraph(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGraph(x uint64) (n int) {
	return sovGraph(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CatalogState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CatalogState{`,
		`MajorVers:` + fmt.Sprintf("%v", this.MajorVers) + `,`,
		`MinorVers:` + fmt.Sprintf("%v", this.MinorVers) + `,`,
		`TraceCount:` + fmt.Sprintf("%v", this.TraceCount) + `,`,
		`NumTraces:` + fmt.Sprintf("%v", this.NumTraces) + `,`,
		`NumPrimes:` + fmt.Sprintf("%v", this.NumPrimes) + `,`,
		`IsPrimeCatalog:` + fmt.Sprintf("%v", this.IsPrimeCatalog) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphDef{`,
		`IsPrime:` + fmt.Sprintf("%v", this.IsPrime) + `,`,
		`TracesID:` + fmt.Sprintf("%v", this.TracesID) + `,`,
		`GraphID:` + fmt.Sprintf("%v", this.GraphID) + `,`,
		`GraphEncoding:` + fmt.Sprintf("%v", this.GraphEncoding) + `,`,
		`CanonicGraphExpr:` + fmt.Sprintf("%v", this.CanonicGraphExpr) + `,`,
		`GraphExprs:` + fmt.Sprintf("%v", this.GraphExprs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VtxEdge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VtxEdge{`,
		`DstVtxID:` + fmt.Sprintf("%v", this.DstVtxID) + `,`,
		`SrcVtxID:` + fmt.Sprintf("%v", this.SrcVtxID) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VtxGroup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEdges := "[]*VtxEdge{"
	for _, f := range this.Edges {
		repeatedStringForEdges += strings.Replace(f.String(), "VtxEdge", "VtxEdge", 1) + ","
	}
	repeatedStringForEdges += "}"
	s := strings.Join([]string{`&VtxGroup{`,
		`GroupID:` + fmt.Sprintf("%v", this.GroupID) + `,`,
		`GraphID:` + fmt.Sprintf("%v", this.GraphID) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`OddSign:` + fmt.Sprintf("%v", this.OddSign) + `,`,
		`Edges:` + repeatedStringForEdges + `,`,
		`Cycles:` + fmt.Sprintf("%v", this.Cycles) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTerm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTerm{`,
		`VertexCount:` + fmt.Sprintf("%v", this.VertexCount) + `,`,
		`StructureID:` + fmt.Sprintf("%v", this.StructureID) + `,`,
		`VariantID:` + fmt.Sprintf("%v", this.VariantID) + `,`,
		`IsPrime:` + fmt.Sprintf("%v", this.IsPrime) + `,`,
		`IsCanonic:` + fmt.Sprintf("%v", this.IsCanonic) + `,`,
		`C1:` + fmt.Sprintf("%v", this.C1) + `,`,
		`C2:` + fmt.Sprintf("%v", this.C2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GrowStep) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GrowStep{`,
		`OpCode:` + fmt.Sprintf("%v", this.OpCode) + `,`,
		`EdgeSign:` + fmt.Sprintf("%v", this.EdgeSign) + `,`,
		`VertexID:` + fmt.Sprintf("%v", this.VertexID) + `,`,
		`SlotID:` + fmt.Sprintf("%v", this.SlotID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGraph(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CatalogState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CatalogState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CatalogState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MajorVers", wireType)
			}
			m.MajorVers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MajorVers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorVers", wireType)
			}
			m.MinorVers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinorVers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceCount", wireType)
			}
			m.TraceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraph
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NumTraces = append(m.NumTraces, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraph
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGraph
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGraph
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NumTraces) == 0 {
					m.NumTraces = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraph
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NumTraces = append(m.NumTraces, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTraces", wireType)
			}
		case 12:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraph
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NumPrimes = append(m.NumPrimes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraph
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGraph
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGraph
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NumPrimes) == 0 {
					m.NumPrimes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraph
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NumPrimes = append(m.NumPrimes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPrimes", wireType)
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrimeCatalog", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrimeCatalog = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrime", wireType)
			}
			m.IsPrime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPrime |= Bool(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TracesID", wireType)
			}
			m.TracesID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TracesID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphID", wireType)
			}
			m.GraphID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GraphID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphEncoding", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphEncoding = append(m.GraphEncoding[:0], dAtA[iNdEx:postIndex]...)
			if m.GraphEncoding == nil {
				m.GraphEncoding = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanonicGraphExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CanonicGraphExpr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphExprs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphExprs = append(m.GraphExprs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VtxEdge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VtxEdge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VtxEdge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstVtxID", wireType)
			}
			m.DstVtxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstVtxID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcVtxID", wireType)
			}
			m.SrcVtxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcVtxID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VtxGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VtxGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VtxGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphID", wireType)
			}
			m.GraphID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GraphID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddSign", wireType)
			}
			m.OddSign = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OddSign |= OddSign(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edges = append(m.Edges, &VtxEdge{})
			if err := m.Edges[len(m.Edges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraph
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cycles = append(m.Cycles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraph
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGraph
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGraph
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Cycles) == 0 {
					m.Cycles = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraph
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cycles = append(m.Cycles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cycles", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTerm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphTerm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphTerm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VertexCount", wireType)
			}
			m.VertexCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VertexCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructureID", wireType)
			}
			m.StructureID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StructureID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VariantID", wireType)
			}
			m.VariantID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VariantID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrime", wireType)
			}
			m.IsPrime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPrime |= Bool(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCanonic", wireType)
			}
			m.IsCanonic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsCanonic |= Bool(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field C1", wireType)
			}
			m.C1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.C1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field C2", wireType)
			}
			m.C2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.C2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrowStep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrowStep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrowStep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpCode", wireType)
			}
			m.OpCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpCode |= GrowOpCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdgeSign", wireType)
			}
			m.EdgeSign = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EdgeSign |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VertexID", wireType)
			}
			m.VertexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VertexID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotID", wireType)
			}
			m.SlotID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGraph(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGraph
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGraph
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGraph
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGraph        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGraph          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGraph = fmt.Errorf("proto: unexpected end of group")
)
